#!/usr/bin/env python 

from __future__ import print_function, division


__author__           = "Dilawar Singh"
__copyright__        = "Copyright 2017-, Dilawar Singh"
__version__          = "1.0.0"
__maintainer__       = "Dilawar Singh"
__email__            = "dilawars@ncbs.res.in"
__status__           = "Development"

import sys
import os
import time
import subprocess
import signal

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import GLib, Gio, Gtk

DEFAULT_CONFIG = '''
[global]
fraction_eyelid_closed_time = 0.100000001
icon_path = /usr/local/share/eyesthatblink/EyesThatBlink.png
blink_rate_per_minute = 13.7
user_has_small_eyes = false
user_wearing_glasses = false
show_user_face = false
'''


try:
    import ConfigParser as cfg
except ImportError as e:
    import configparser as cfg

IS_PYTHON3 = False
if sys.version_info.major == 3:
    IS_PYTHON3 = True

MENU_XML = ''
am_ = None
app_ = None

def writeConfigFile( ):
    global config_
    with open( config_file_, 'w' ) as f:
        config_.write( f )

def toBool( val ):
    if val == 'true':
        return True
    if val == 'false':
        return False
    return val 

def toCBool( val ):
    if val:
        return 'true'
    return 'false'

def toggle( boolval ):
    if boolval == 'true':
        return 'false'
    elif boolval == 'false':
        return 'true'
    else:
        return 'true'

def show_user_eyes( data = None ):
    global config_
    oldval = getVal( 'global', 'show_user_face' )
    newval = toggle( oldval )
    setVal( 'global', 'show_user_face', newval )
    writeConfigFile( )

def tail( f, lines=20 ):
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = -1
    blocks = [] # blocks of size BLOCK_SIZE, in reverse order starting
                # from the end of the file
    while lines_to_go > 0 and block_end_byte > 0:
        if (block_end_byte - BLOCK_SIZE > 0):
            # read the last block we haven't yet read
            f.seek(block_number*BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        else:
            # file too small, start from begining
            f.seek(0,0)
            # only read what was not read
            blocks.append(f.read(block_end_byte))
        lines_found = blocks[-1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines()[-total_lines_wanted:])


class ActionManager(object):
    """
    docstring for ActionManager.
    """

    def __init__(self, **kwargs):
        super(ActionManager, self).__init__()
        self.configfile = kwargs.get( 
                'config_file',
                os.path.join( os.environ[ 'HOME'], '.cache', 'EyesThatBlink.conf' )
                )
        self.datafile = kwargs.get( 'self.datafile'
                , os.path.join( os.environ[ 'HOME'], '.cache', 'EyesThatBlink.data' )
                )

        # Do not cause error if config file is missing. If not available, write
        # the deafult one.
        if not os.path.exists( self.configfile ):
            with open( self.configfile, 'w' ) as f:
                f.write( DEFAULT_CONFIG )

        if not os.path.exists( self.datafile ):
            with open( self.datafile, 'w' ) as f:
                f.write( '' )

        self.config = cfg.ConfigParser( )
        self.config.read( self.configfile )
        self.etbpath = os.path.join( '@ETB_BINARY_PATH@', 'etb' )

        if not os.path.exists( self.etbpath ):
            msg = 'Required program %s not found.' % self.etbpath 
            raise RuntimeError( msg )

        self.last_notified_time = time.time( )
        self.p_ = None

    def init_ETB( self ):
        self.p_ = subprocess.Popen( self.etbpath 
                , stdout = subprocess.PIPE
                , preexec_fn = os.setsid 
                )
        assert self.p_, "Could not launch blink detector"

    def setVal( self, sec, key, val ):
        assert val, "Got %s" % val 
        print( 'Setting value %s=%s' % (key, val ) )
        self.config.set( sec, key, str(val) )

    def getVal( self, sec, key ):
        return self.config.get( sec, key )

    def writeConfigFile( self ):
        with open( self.configfile, 'w' ) as f:
            self.config.write( f )

    def userWearingGlasses(self, data = None ):
        val = data.get_active( )
        self.setVal( 'global', 'user_wearing_glasses', toCBool( val ) )
        self.writeConfigFile( )

    def userHaveSmallEyes(self, data = None ):
        val = data.get_active( )
        self.setVal( 'global', 'user_has_small_eyes', toCBool( val ) )
        self.writeConfigFile( )

    def changeThreshold( self, data = None ):
        val = data.get_value( )
        print( 'Changing threshold to %s' % val )
        self.setVal( 'global', 'blink_rate_per_minute', val )
        self.writeConfigFile( )


    def notify( self, msg ):
        subprocess.call( [ 'notify-send', msg ], shell = True )


    def notifyUser( self ):
        # Read data in non-blocking mode.
        brpm = self.getVal( 'global', 'blink_rate_per_minute' )
        # A good eyeblink last for 250ms.
        thres = (0.25 * float(brpm) ) / 60.0
        with open( self.datafile ) as f:
            try:
                line  = f.read( ).strip( )
            except Exception as e:
                print( 'Failed to data line due to %s' % e )
                return True
            print( line )
            line = line.split( ',' )

            avgMoist = 0.1
            try:
                avgMoist = float( line[-1] )
            except Exception as e:
                print( e )

            if thres > avgMoist:
                if time.time( ) > self.last_notified_time + 120:
                    self.notify( "You are not blinking enough", 1 )
                    self.last_notified_time = time.time( )
            
        return True


    def shutdownEtb( self ):
        os.killpg( os.getpgid( self.p_.pid ), signal.SIGTERM )

    # Trap the signal.
    def handler( self, signum, frame ):
        global app_
        self.shutdownEtb( )
        if app_ is not None:
            app_.quit( )

# Create ActionManager class instance.
def init_all( ):
    global MENU_XML
    global am_
    with open( '@UI_XML_PATH@' ) as f:
        MENU_XML = f.read( )
    assert MENU_XML, "No menu found"
    am_ = ActionManager( )
    am_.init_ETB( )

    # Attach signal
    signal.signal( signal.SIGINT, am_.handler )

class AppWindow( Gtk.ApplicationWindow ):

    def __init__(self, *args, **kwargs):
        super( AppWindow, self).__init__(*args, **kwargs)

        # This will be in the windows group and have the "win" prefix
        max_action = Gio.SimpleAction.new_stateful("maximize", None,
                                           GLib.Variant.new_boolean(False))
        max_action.connect("change-state", self.on_maximize_toggle)
        self.add_action(max_action)

        # Keep it in sync with the actual state
        self.connect("notify::is-maximized"
                , lambda obj, pspec: 
                    max_action.set_state( 
                        GLib.Variant.new_boolean(obj.props.is_maximized)
                        )
                )

    def on_maximize_toggle(self, action, value):
        action.set_state(value)
        if value.get_boolean():
            self.maximize()
        else:
            self.unmaximize()

class Application(Gtk.Application):

    def __init__(self, *args, **kwargs):
        super( Application, self ).__init__( *args
                , application_id="org.dilawar.EyesThatBlink"
                , flags=Gio.ApplicationFlags.HANDLES_COMMAND_LINE
                , **kwargs
                )
        self.window = None


    def do_startup(self):
        Gtk.Application.do_startup(self)

        action = Gio.SimpleAction.new("about", None)
        action.connect("activate", self.on_about)
        self.add_action(action)

        # on_quit
        action = Gio.SimpleAction.new("quit", None)
        action.connect("activate", self.on_quit)
        self.add_action(action)

        action = Gio.SimpleAction.new("preferences", None)
        action.connect("activate", self.preferences)
        self.add_action(action)

        builder = Gtk.Builder.new_from_string(MENU_XML, -1)
        self.set_app_menu( builder.get_object("appmenu") )

    def do_activate(self):
        # We only allow a single window and raise any existing ones
        if not self.window:
            # Windows are associated with the application
            # when the last one is closed the application shuts down
            self.window = AppWindow(application=self, title="Eyes That Blink")

        self.window.present()

    def do_command_line(self, command_line):
        options = command_line.get_options_dict()

        if options.contains("test"):
            # This is printed on the main instance
            print("Test argument recieved")

        self.activate()
        return 0

    def on_about(self, action, param):
        about_dialog = Gtk.AboutDialog(transient_for=self.window, modal=True)
        about_dialog.present()

    def on_quit(self, action, param):
        self.quit()

    def preferences( self, action, param ):
        global am_
        window = Gtk.Window( )
        window.set_title( 'Settings' )
        
        # Sets the border width of the window.
        window.set_border_width(20)
        
        table = Gtk.Table( 4, 1, True )
        
        # Put the table in the main window
        window.add(table)
        
        # Create first button
        glasses = Gtk.CheckButton("Wearing glasses?")
        glasses.set_active( toBool( am_.getVal( 'global', 'user_wearing_glasses' )))
        glasses.connect("clicked", am_.userWearingGlasses )
        table.attach(glasses, 0, 1, 0, 1)
        glasses.show()
        
        userEyes = Gtk.CheckButton( "Small eyes?" )
        userEyes.set_active( toBool( am_.getVal( 'global', 'user_has_small_eyes' ) ))
        userEyes.connect("clicked", am_.userHaveSmallEyes )
        userEyes.show()
        table.attach(userEyes, 0, 1, 1, 2)

        # Scale bar.
        defaultVal = float( am_.getVal( 'global', 'blink_rate_per_minute' ) )
        hscale = Gtk.Scale.new_with_range( Gtk.Orientation.HORIZONTAL, 10, 22, 0.1 )
        hscale.set_value( defaultVal )
        hscale.connect("value_changed", am_.changeThreshold )
        hscale.show( )
        table.attach( hscale, 0, 1, 2, 3 )

        # Create "Quit" button
        quitButton = Gtk.Button("Close")
        
        # When the button is clicked, we call the main_quit function
        # and the program exits
        quitButton.connect("clicked", lambda x: window.destroy( ) )
        
        # Insert the quit button into the both lower quadrants of the table
        table.attach( quitButton, 0, 1, 3, 4)
        quitButton.show()
        
        table.show()
        window.show()

def timeout_fun( ):
    global am_
    return am_.notifyUser( )

def main( ):
    global app_
    app_ = Application()
    # Let the c++ core etb take care of it.
    # GLib.timeout_add( 300, timeout_fun )
    app_.run( sys.argv )


if __name__ == "__main__":
    try:
        init_all( )
    except Exception as e:
        print( 'Failed to initialize: %s' % e )
        quit( -1 )

    try:
        main( )
    except Exception as e:
        print( 'Closing app due to %s' % e )
        am_.shutdownEtb( )
        quit( 1 )
